<launch>
  <rosparam command="load" file="$(find ras_launch)/global_parameters.yaml" />

  <!-- load the odometry node -->
  <node pkg="ras_localization" type="odometry" name="odometry"/>
  <!-- load pf node -->
  <node pkg="ras_localization" type="particle_filter" name="particle_filter" />

  <!-- load the tf node and static transforms-->
  <node pkg="ras_tf" type="broadcaster" name="broadcaster" />
  <node pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args="-0.075 0 0.2275 0 0 0 base_link laser 10"/>
  <node pkg="tf" type="static_transform_publisher" name="base_link_to_camera" args="0.0925 0 0.18 -1.5708 0 -1.9199 base_link camera 10"/>

  <!-- load the motors controller node -->
  <node pkg="ras_motor_controller" type="ras_motor_controller" name="ras_motor_controller">
    <rosparam command="load" file="$(find ras_motor_controller)/motor_params.yaml" />
  </node>

  <!-- Load map file -->
  <param name="map_file" value="$(find occupancy_grid)/maps/$(arg map_file)"/>

  <!-- Load Walls -->
  <node pkg="map_representation" type="map_representation" name="map_representation" />

  <!-- Load OccupancyGrid -->
  <node pkg="occupancy_grid" type="occupancy_grid" name="occupancy_grid" args="$(arg readmap)" output="screen"/>

  <node pkg="occupancy_grid" type="addMarker" name="Object_marker"/>

  <!-- Path planning -->
  <node pkg="ras_path_planning" type="astar.py" name="astar"/>

  <!-- Audio -->
  <node pkg="sound_play" type="soundplay_node.py" name="soundplay_node" />

  <node pkg="object_detection" type="object_detector_srv.py" name="object_detector"/>

  <node pkg="ras_object_master" type="ras_object_master" name="object_master"/>

  <!-- Battery detecetion-->
  <node pkg="ras_battery_detection" type="ras_pcl_battery_detection_simple" name="battery_detection" />

  <!-- Obstacle detection -->
  <node pkg="ras_obstacle_detection" type="lidar_detection" name="lidar_obstacle_detection" />

  <!-- Decision master -->
  <node pkg="ras_object_decision_master" type="object_decision_master.py" name="object_decision_master"/>

  <!-- Pure pursuit -->
  <node pkg="pure_pursuit_controller" type="pure_pursuit_server" name="pure_pursuit_server"/>

  <!-- Map Explorer -->
  <node pkg="map_explorer" type="explorer_server" name="explorer_server"/>

  <!-- Impossible object pickup -->
  <node pkg="impossible_object_pickup" type="impossible_pickup_server" name="impossible_pickup_server"/>

  <!-- Load Object detection -->
  <node pkg="ras_object_detection" type="object_position_estimation" name="object_position_estimation"/>

  <!-- Load Mapping -->
  <node pkg="occupancy_grid" type="mapping" name="mapping" respawn="true"/>

  <!-- Load gripper controller -->
  <node pkg="ras_gripper_controller" type="GripperController.py" name="gripper">
  </node>

  <!-- Load servo -->
  <node pkg="arduino_servo_control" type="servo_control" name="arduino_servo_control">
  </node>

  <!-- Load pure pursuit controller parameters -->
  <rosparam command="load" file="$(find pure_pursuit_controller)/controller_params.yaml" />

</launch>
